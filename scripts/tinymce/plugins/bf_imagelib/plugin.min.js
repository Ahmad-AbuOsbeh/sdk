const fixedOptions = {
  xxs: "32px",
  xs: "64px",
  s: "128px",
  m: "200px",
  l: "304px",
  xl: "416px",
  xxl: "600px",
  "720": "720px",
  "1080": "1080px",
  "1440": "1440px",
};

tinymce.PluginManager.add("bf_imagelib", function (editor, url) {
  // Add a button that opens a window
  editor.ui.registry.addButton("bf_imagelib", {
    // text: "Image Library",
    icon: 'image',
    tooltip: 'Insert/edit image',
    onAction: function () {
      showImageLibDialog(editor, url);
    },
    showDialog: function() {
      showImageLibDialog(editor, url);
    }
  });

  return {
    getMetadata: function () {
      return {
        name: "ImageLib plugin",
        url: "https://github.com/BuildFire/sdk/wiki/How-to-use-ImageLib",
      };
    },
  };
});
function showImageLibDialog(editor, url) {
  const options = {
    showIcons: false,
    multiSelection: false,
  };

  function callback(err, results) {
    if (err) return console.error(err);
    const image = results.selectedFiles[0];

    if (!image || !image.length) return;

    editor.windowManager.openUrl({
      title: "Crop / Resize",
      url: url + "/dialog.html",
      width: 300,
      height: 250,
      buttons: [
        { text: "Close", type: 'cancel'},
        {
          text: "Insert",
          name: 'Insert Image',
          type: 'custom',
          primary : true,
        },
      ],
      onAction: (dialogApi, details) => {
        if (details.name === 'Insert Image') {
          dialogApi.sendMessage({
            message: 'getFormValues'
          });
        }
      },
      onMessage : (dialogApi, details) => {
        let formValues = details.data.content;
        let mceAction = details.mceAction;
        if (formValues && mceAction === 'setFormValues') {
          let resizedImage = "";
          let size = formValues.fixed
            ? formValues.fixedOption
            : formValues.responsiveOption;
  
          if (formValues.resize) {
            resizedImage = buildfire.imageLib.resizeImage(image, {
              size: size,
              aspect: "1:1",
            });
          } else {
            resizedImage = buildfire.imageLib.cropImage(image, {
              size: size,
              aspect: formValues.aspectOption,
            });
          }
  
          editor.insertContent(
            `<img width="${
              formValues.fixed ? fixedOptions[formValues.fixedOption] : ""
            }" src="${resizedImage}"  />`
          );
          dialogApi.close();
        }
      }
    });
  }
  buildfire.imageLib.showDialog(options, callback);
}