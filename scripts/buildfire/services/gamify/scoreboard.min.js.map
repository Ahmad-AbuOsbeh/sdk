{"version":3,"sources":["../sdk/scripts/buildfire/services/gamify/scoreboard.js"],"names":["buildfire","gamify","Scoreboard","tagName","size","autoSubscribeToPushNotification","this","pushGroupName","prototype","getScoreboard","callback","publicData","get","err","result","data","topScores","undefined","gamesPlayed","reset","save","_PNEnabled","notifications","pushNotification","subscribe","cb","groupName","console","error","unsubscribe","logScore","user","score","warn","t","ts","Date","logError","rankedAt","newRec","createdOn","length","push","sort","a","b","bumpedOff","pop","update","id","i","obj","email","schedule","title","text","displayName","users"],"mappings":"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","file":"scoreboard.min.js","sourcesContent":["\"use strict\";\n\n/**\n * Created by danielhindi on 1/18/18.\n */\nif (typeof buildfire == 'undefined') throw 'please add buildfire.js first to use BuildFire services';\nif (!buildfire.gamify) buildfire.gamify = {};\n\nbuildfire.gamify.Scoreboard = function (tagName, size, autoSubscribeToPushNotification) {\n  this.size = size || 10;\n  this.autoSubscribeToPushNotification = autoSubscribeToPushNotification;\n  if (this.size < 1) this.size = 10;\n  this.tagName = tagName || 'scoreboard';\n  this.pushGroupName = 'scoreboard_' + this.tagName;\n};\n\nbuildfire.gamify.Scoreboard.prototype = {\n  size: 10,\n  getScoreboard: function (callback) {\n    buildfire.publicData.get(this.tagName, function (err, result) {\n      if (err) callback(err);else {\n        if (result.data.topScores) callback(undefined, result.data);else callback(undefined, {\n          gamesPlayed: 0,\n          topScores: []\n        });\n      }\n    });\n  },\n  reset: function () {\n    var data = {\n      gamesPlayed: 0,\n      topScores: []\n    };\n    buildfire.publicData.save(data, this.tagName, function () {});\n  },\n  _PNEnabled: function () {\n    return buildfire.notifications && buildfire.notifications.pushNotification;\n  },\n  subscribe: function (cb) {\n    /// if PushNotifications are available then subscribe to the group\n    if (this._PNEnabled()) {\n      buildfire.notifications.pushNotification.subscribe({\n        groupName: this.pushGroupName\n      }, function (err) {\n        if (err) console.error(err);\n        if (cb) cb(err);\n      });\n      return true;\n    } else return false;\n  },\n  unsubscribe: function (cb) {\n    /// if PushNotifications are available then unsubscribe from the group\n    if (this._PNEnabled()) {\n      buildfire.notifications.pushNotification.unsubscribe({\n        groupName: this.pushGroupName\n      }, function (err) {\n        if (err) console.error(err);\n        if (cb) cb(err);\n      });\n      return true;\n    } else return false;\n  },\n  logScore: function (user, score, callback) {\n    if (this.autoSubscribeToPushNotification) {\n      if (!this.subscribe()) {\n        console.warn('Cannot subscribe to scoreboard push notifications because buildfire push notification services is not attached');\n      }\n    }\n\n    var t = this;\n    var ts = new Date();\n    buildfire.publicData.get(this.tagName, function (err, result) {\n      function logError(err) {\n        if (err) {\n          debugger;\n          callback(err);\n        }\n      }\n\n      var newRec = {\n        user: user,\n        score: score,\n        createdOn: ts\n      };\n      var data = {\n        gamesPlayed: 0,\n        topScores: [newRec]\n      };\n      if (err) callback(err);else if (result) {\n        if (!result.data.topScores) {\n          data.gamesPlayed++;\n          buildfire.publicData.save(data, t.tagName, logError);\n        } else {\n          /// check if your score is greater than the lowest one\n          if (result.data.topScores.length > t.size) {\n            if (result.data.topScores[t.size - 1].score > score) /// nothing to do here you didnt make the list\n              callback();\n          }\n\n          data = result.data;\n          data.topScores.push(newRec);\n          data.topScores = data.topScores.sort(function (a, b) {\n            return b.score - a.score;\n          });\n          var bumpedOff;\n          if (data.topScores.length > t.size) bumpedOff = data.topScores.pop();\n          data.gamesPlayed++;\n          buildfire.publicData.update(result.id, data, t.tagName, logError);\n          var rankedAt;\n\n          for (var i = 0; i < data.topScores.length; i++) {\n            if (data.topScores[i].createdOn == ts) {\n              rankedAt = i;\n              break;\n            }\n          }\n\n          var obj = {\n            bumpedOff: bumpedOff,\n            rankedAt: rankedAt\n          };\n\n          if (t._PNEnabled()) {\n            if (obj.bumpedOff && obj.bumpedOff.user.email != user.email) {\n              //send notification\n              buildfire.notifications.pushNotification.schedule({\n                title: 'You got kicked off !!!',\n                text: 'Your old score is no longer on the top 10. ' + user.displayName + ' has taken your spot. Honestly, I dont know how you sleep at night.' //,at: new Date()\n                ,\n                users: [obj.bumpedOff.user.id]\n              }, logError);\n            }\n\n            if (rankedAt == 0) {\n              buildfire.notifications.pushNotification.schedule({\n                title: 'There is a new champion!',\n                text: user.displayName + ' has taken the lead at the new undisputed champion with a score of ' + score,\n                groupName: t.pushGroupName\n              }, logError);\n            }\n\n            if (rankedAt == 1) {\n              buildfire.notifications.pushNotification.schedule({\n                title: 'There is a challenger to the champion',\n                text: user.displayName + ' has taken 2nd place with a score of ' + score + '. Watch out ' + data.topScores[0].user.displayName,\n                groupName: t.pushGroupName\n              }, logError);\n            }\n\n            if (rankedAt == 2) {\n              buildfire.notifications.pushNotification.schedule({\n                title: 'There is a kid in town!',\n                text: user.displayName + ' has taken 3rd place. Keep an eye on this one',\n                groupName: t.pushGroupName\n              }, logError);\n            }\n          }\n\n          callback(null, obj);\n        }\n      } else {\n        data.gamesPlayed++;\n        buildfire.publicData.save(data, t.tagName, logError);\n        callback(null, {\n          rankedAt: 0\n        });\n      }\n    });\n  }\n};"]}