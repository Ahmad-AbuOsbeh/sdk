const dynamicEngine={triggerContextChange(e){for(var t in dynamicEngine.expressions._evaluationRequests){t=dynamicEngine.expressions._evaluationRequests[t];t.context&&t._context.__handler__._usedProperties[e.contextProperty]&&dynamicEngine.expressions._evaluate(t)}},getGlobalSettings(e,t){t(null,{})},expressions:{_evaluationRequests:{},evaluate(e,t){var n=e["id"],e={callback:t,options:e,id:n||dynamicEngine.expressions._nanoid(),destroy(){dynamicEngine.expressions._destroyRequest(this.id)}};return n&&dynamicEngine.expressions._destroyRequest(n),dynamicEngine.expressions._evaluate(e),e},_evaluate(r){const i=dynamicEngine["expressions"],{id:d,callback:c}=r,u=r.options["expression"];i._prepareContext(r.options,(e,t)=>{try{var n={_usedProperties:{},get(e,t){return"__handler__"===t?this:t in e?(this._usedProperties[t]=!0,e[t]):void 0},set(){throw"not_allowed"}},s="`"+u+"`";r._context=new Proxy(t,n),r.context=t;var a=Function(`"use strict"; const context = this;return (${s})`).bind(r._context)(),o=(i._evaluationRequests[d]=r)._context.data.__handler__._usedProperties;dynamicEngine.datasources._fetchNeededDatasources({usedDatasources:o,extendedDatasources:r.options.extendedDatasources},(e,t)=>e?console.error("Error occurred while fetching data: ",e):void dynamicEngine.triggerContextChange({contextProperty:"data",data:t})),r.callback(null,a)}catch(e){c(e)}})},_destroyRequest(e){delete dynamicEngine.expressions._evaluationRequests[e]},_getBaseContext(e,t){t(null,{})},getContext(e,t){t(null,{})},_prepareContext(s,a){dynamicEngine.expressions._getBaseContext(null,(e,n)=>{dynamicEngine.expressions.getContext({request:s},(e,t)=>{Object.assign(n,t,s.extendedContext),dynamicEngine.datasources._addDatasourcesData({baseContext:n}),a(null,n)})})},_isServer(){return!("undefined"!=typeof window&&window.document)},_nanoid(e=21){return crypto.getRandomValues(new Uint8Array(e)).reduce((e,t)=>e+=(t&=63)<36?t.toString(36):t<62?(t-26).toString(36).toUpperCase():62<t?"-":"_","")}},datasources:{_datasourcesData:{},_requestedDatasources:{},_addDatasourcesData({baseContext:e}){var t=this._datasourcesData;e.data=new Proxy(t,{_usedProperties:{},get(e,t){return"__handler__"===t?this:(this._usedProperties[t]=!0,e[t])}})},_fetchNeededDatasources({usedDatasources:a,extendedDatasources:t},o){a&&0<Object.keys(a).length&&dynamicEngine.datasources._getDatasources(null,(e,n)=>{if(e)return console.error("Error occurred while fetching data: ",e);if(n||t){n=n||[],t&&(n=n.concat(t));for(let t in a){var s;this._requestedDatasources[t]&&!(5e3<new Date-this._requestedDatasources[t].lastTimeFetched)||(s=n.find(e=>e.id===t))&&this._fetchDatasource({datasource:s},o)}}})},_fetchDatasource({datasource:t},n){const e={};t.lastTimeFetched=new Date,this._requestedDatasources[t.id]=t,e.method=t.configurations.method,t.configurations.headers&&(e.headers=t.configurations.headers),t.configurations.body&&(e.body=t.configurations.body),fetch(t.configurations.url,e).then(e=>e.json()).then(e=>{dynamicEngine.datasources._datasourcesData[t.id]=e,n(null,e)}).catch(e=>{n(e,null)})},_getDatasources(e,n){dynamicEngine.getGlobalSettings(null,(e,t)=>e?n(e):t?.appDatasources&&0<t.appDatasources.length?n(null,t.appDatasources):void n(null,null))}}};
//# sourceMappingURL=dynamicEngine.min.js.map
