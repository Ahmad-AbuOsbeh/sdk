{"version":3,"sources":["../sdk/scripts/dynamic/dynamicEngine.js"],"names":["dynamicEngine","triggerContextChange","options","key","expressions","_evaluationRequests","request","context","_context","_usedProperties","contextProperty","_evaluate","evaluate","id","expression","extendedContext","callback","evaluationRequest","_nanoid","destroy","_destroyRequest","this","_prepareContext","err","handler","get","target","prop","set","preparedExpression","Proxy","evaluatedExpression","Function","bind","_getBaseContext","getContext","baseContext","Object","assign","_isServer","window","document","t","crypto","getRandomValues","Uint8Array","reduce","e","toString","toUpperCase"],"mappings":"AACA,MAAMA,cAAgB,CAQrBC,qBAAqBC,GACpB,IAAK,IAAIC,KAAOH,cAAcI,YAAYC,oBAAqB,CAC1DC,EAAUN,cAAcI,YAAYC,oBAAoBF,GACxDG,EAAQC,SAAWD,EAAQE,SAAsB,YAAEC,gBAAgBP,EAAQQ,kBAC9EV,cAAcI,YAAYO,UAAUL,KAIvCF,YAAa,CACZC,oBAAqB,GASrBO,SAAS,CAACC,GAAAA,EAAIC,WAAAA,EAAYC,gBAAAA,GAAkBC,GACrCC,EAAoB,CACzBD,SAAAA,EACAF,WAAAA,EACAC,gBAAAA,EACAF,GAAIA,GAAMb,cAAcI,YAAYc,UACpCC,QAAS,WACRnB,cAAcI,YAAYgB,gBAAgBC,KAAKR,MAQjD,OAJIA,GACHb,cAAcI,YAAYgB,gBAAgBP,GAE3Cb,cAAcI,YAAYO,UAAUM,GAC7BA,GAERN,UAAW,SAASL,GACnB,MAAQF,EAAgBJ,cAAhBI,eACF,CAAES,GAAAA,EAAIE,gBAAAA,EAAiBD,WAAAA,EAAYE,SAAAA,GAAaV,EAEtDF,EAAYkB,gBACX,CAAEP,gBAAAA,GACF,CAACQ,EAAKhB,KACL,IACC,IAAMiB,EAAU,CACff,gBAAiB,GACjBgB,IAAIC,EAAQC,GACX,MAAa,gBAATA,EAA+BN,KAC/BM,KAAQD,GACXL,KAAKZ,gBAAgBkB,IAAQ,EACtBD,EAAOC,SAFf,GAMDC,MACC,KAAM,gBAGFC,EAAqB,IAAMf,EAAa,IAC9CR,EAAQE,SAAW,IAAIsB,MAAMvB,EAASiB,GACtClB,EAAQC,QAAUA,EAClB,IAAMwB,EAAuBC,uDAAuDH,MAAuBI,KAAK3B,EAAQE,SAA3FwB,IAC7B5B,EAAYC,oBAAoBQ,GAAMP,GAC9BU,SAAS,KAAMe,GACtB,MAAOR,GACRP,EAASO,OASbH,gBAAiB,SAASP,UAClBb,cAAcI,YAAYC,oBAAoBQ,IAQtDqB,gBAAgBhC,EAASc,GAExBA,EAAS,KADS,KASnBmB,WAAWjC,EAASc,GACnBA,EAAS,KAAM,KAQhBM,gBAAgB,CAACP,gBAAAA,GAAkBC,GAClChB,cAAcI,YAAY8B,gBAAgB,KAAM,CAACX,EAAKa,KACrDpC,cAAcI,YAAY+B,WAAW,KAAM,CAACZ,EAAKhB,KAChD8B,OAAOC,OAAOF,EAAa7B,EAASQ,GACpCC,EAAS,KAAMoB,QAQlBG,YACC,QAA2B,oBAAXC,QAA0BA,OAAOC,WAMlDvB,QAAQwB,EAAE,IACT,OAAOC,OAAOC,gBAAgB,IAAIC,WAAWH,IAAII,OAAO,CAAEJ,EAAEK,IAAIL,IAAIK,GAAG,IAAI,GAAGA,EAAEC,SAAS,IAAID,EAAE,IAAIA,EAAE,IAAIC,SAAS,IAAIC,cAAgB,GAAFF,EAAK,IAAI,IAAK","file":"dynamicEngine.min.js","sourcesContent":["// eslint-disable-next-line no-redeclare\nconst dynamicEngine = {\n\t/**\n\t* Trigger reevaluation when (onLogin, onLogout, appTheme change) happens\n\t* @param {Object} options - information about the triggered source (contextProperty, data)\n\t* @param {string} options.contextProperty - The event that have been triggered (onLogin, onLogout, appTheme change)\n\t* @param {Object} options.data - Data coming from the event triggering\n\t* @public\n\t*/\n\ttriggerContextChange(options) {\n\t\tfor (let key in dynamicEngine.expressions._evaluationRequests) {\n\t\t\tlet request = dynamicEngine.expressions._evaluationRequests[key];\n\t\t\tif (request.context && request._context['__handler__']._usedProperties[options.contextProperty]) {\n\t\t\t\tdynamicEngine.expressions._evaluate(request);\n\t\t\t}\n\t\t}\n\t},\n\texpressions: {\n\t\t_evaluationRequests: {},\n\t\t/**\n\t\t* Evaluate the received expression\n\t\t* @param {Object} options - The needed elements to evaluate the expression\n\t\t* @param {string} options.expression - The expression to be evaluated\n\t\t* @param {Object} options.extendedContext - Additional context to evaluate the expression against\n\t\t* @param {Function} callback - Returns the evaluated expression or error if existed\n\t\t* @public\n\t\t*/\n\t\tevaluate({id, expression, extendedContext}, callback) {\n\t\t\tconst evaluationRequest = {\n\t\t\t\tcallback,\n\t\t\t\texpression,\n\t\t\t\textendedContext,\n\t\t\t\tid: id || dynamicEngine.expressions._nanoid(),\n\t\t\t\tdestroy: function() {\n\t\t\t\t\tdynamicEngine.expressions._destroyRequest(this.id);\n\t\t\t\t}\n\t\t\t};\n\t\t\t// if explicit id is sent, destroy if exists\n\t\t\tif (id) {\n\t\t\t\tdynamicEngine.expressions._destroyRequest(id);\n\t\t\t}\n\t\t\tdynamicEngine.expressions._evaluate(evaluationRequest);\n\t\t\treturn evaluationRequest;\n\t\t},\n\t\t_evaluate: function(request) {\n\t\t\tconst { expressions } = dynamicEngine;\n\t\t\tconst { id, extendedContext, expression, callback } = request;\n\n\t\t\texpressions._prepareContext(\n\t\t\t\t{ extendedContext },\n\t\t\t\t(err, context) => {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tconst handler = {\n\t\t\t\t\t\t\t_usedProperties: {},\n\t\t\t\t\t\t\tget(target, prop) {\n\t\t\t\t\t\t\t\tif (prop === '__handler__') return this;\n\t\t\t\t\t\t\t\tif (prop in target) {\n\t\t\t\t\t\t\t\t\tthis._usedProperties[prop] = true;\n\t\t\t\t\t\t\t\t\treturn target[prop];\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\treturn undefined;\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tset() {\n\t\t\t\t\t\t\t\tthrow 'not_allowed';\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t};\n\t\t\t\t\t\tconst preparedExpression = '`' + expression + '`';\n\t\t\t\t\t\trequest._context = new Proxy(context, handler);\n\t\t\t\t\t\trequest.context = context;\n\t\t\t\t\t\tconst evaluatedExpression =  Function(`\"use strict\"; const context = this;return (${preparedExpression})`).bind(request._context)();\n\t\t\t\t\t\texpressions._evaluationRequests[id] = request;\n\t\t\t\t\t\trequest.callback(null, evaluatedExpression);\n\t\t\t\t\t} catch (err) {\n\t\t\t\t\t\tcallback(err);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t},\n\t\t/**\n\t\t* Get the base context\n\t\t* @param {string} id - The unique id of the request that should be deleted\n\t\t* @private\n\t\t*/\n\t\t_destroyRequest: function(id) {\n\t\t\tdelete dynamicEngine.expressions._evaluationRequests[id];\n\t\t},\n\t\t/**\n\t\t* Get the base context\n\t\t* @param {Object} options\n\t\t* @param {Function} callback - Returns the base context (shared between all platforms)\n\t\t* @private\n\t\t*/\n\t\t_getBaseContext(options, callback) {\n\t\t\tlet baseContext = {}; // shared functionality that (app/web/sdk) could use\n\t\t\tcallback(null, baseContext);\n\t\t},\n\t\t/**\n\t\t* @desc This function will be overridden in each platform; so it would get correctly the context of the platform\n\t\t* @param {Object} options\n\t\t* @param {Function} callback - Returns the context of the platform, which requested dynamicEngine.expressions\n\t\t* @public\n\t\t*/\n\t\tgetContext(options, callback) {\n\t\t\tcallback(null, {});\n\t\t},\n\t\t/**\n\t\t* @desc This function will merge the different contexts (baseContext, platform's context and the extendedContext) and return them\n\t\t* @param {Object} options\n\t\t* @param {Function} callback - Returns the final version of the context to be used in the evaluation\n\t\t* @private\n\t\t*/\n\t\t_prepareContext({extendedContext}, callback) {\n\t\t\tdynamicEngine.expressions._getBaseContext(null, (err, baseContext) => {\n\t\t\t\tdynamicEngine.expressions.getContext(null, (err, context) => {\n\t\t\t\t\tObject.assign(baseContext, context, extendedContext);\n\t\t\t\t\tcallback(null, baseContext);\n\t\t\t\t});\n\t\t\t});\n\t\t},\n\t\t/**\n\t\t* @desc This function returns weather this file is loaded from a client or a server side\n\t\t* @private\n\t\t*/\n\t\t_isServer() {\n\t\t\treturn !(typeof window !== 'undefined' && window.document);\n\t\t},\n\t\t/**\n\t\t* Get unique id each time\n\t\t* @private\n\t\t*/\n\t\t_nanoid(t=21) {\n\t\t\treturn crypto.getRandomValues(new Uint8Array(t)).reduce(((t,e)=>t+=(e&=63)<36?e.toString(36):e<62?(e-26).toString(36).toUpperCase():e>62?'-':'_'),'');\n\t\t}\n\t}\n};\n"]}