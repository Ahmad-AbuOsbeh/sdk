{"version":3,"sources":["../sdk/scripts/dynamic/dynamicEngine.js"],"names":["dynamicEngine","triggerContextChange","options","key","expressions","_evaluationRequests","request","context","_context","_usedProperties","contextProperty","_evaluate","getGlobalSettings","callback","evaluate","id","evaluationRequest","_nanoid","destroy","_destroyRequest","this","expression","_prepareContext","err","handler","get","target","prop","set","preparedExpression","Proxy","evaluatedExpression","Function","bind","usedDatasources","data","datasources","_fetchNeededDatasources","extendedDatasources","res","console","error","_getBaseContext","getContext","baseContext","Object","assign","extendedContext","_addDatasourcesData","_isServer","window","document","t","crypto","getRandomValues","Uint8Array","reduce","e","toString","toUpperCase","_datasourcesData","_requestedDatasources","keys","length","_getDatasources","concat","usedDatasourceId","existedDatasource","Date","lastTimeFetched","find","datasource","_fetchDatasource","method","configurations","headers","body","fetch","url","then","response","json","catch","globalSettings","appDatasources"],"mappings":"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","file":"dynamicEngine.min.js","sourcesContent":["// eslint-disable-next-line no-redeclare\nconst dynamicEngine = {\n\t/**\n\t* Trigger reevaluation when (onLogin, onLogout, appTheme change) happens\n\t* @param {Object} options - information about the triggered source (contextProperty, data)\n\t* @param {string} options.contextProperty - The event that have been triggered (onLogin, onLogout, appTheme change)\n\t* @param {Object} options.data - Data coming from the event triggering\n\t* @public\n\t*/\n\ttriggerContextChange(options) {\n\t\tfor (let key in dynamicEngine.expressions._evaluationRequests) {\n\t\t\tlet request = dynamicEngine.expressions._evaluationRequests[key];\n\t\t\tif (request.context && request._context['__handler__']._usedProperties[options.contextProperty]) {\n\t\t\t\tdynamicEngine.expressions._evaluate(request);\n\t\t\t}\n\t\t}\n\t},\n\tgetGlobalSettings(options, callback) {\n\t\tcallback(null, {});\n\t},\n\texpressions: {\n\t\t_evaluationRequests: {},\n\t\t/**\n\t\t* Evaluate the received expression\n\t\t* @param {Object} options - The needed elements to evaluate the expression\n\t\t* @param {string} options.expression - The expression to be evaluated\n\t\t* @param {Object} options.extendedContext - Additional context to evaluate the expression against\n\t\t* @param {Function} callback - Returns the evaluated expression or error if existed\n\t\t* @public\n\t\t*/\n\t\tevaluate(options, callback) {\n\t\t\tconst { id } = options; \n\t\t\tconst evaluationRequest = {\n\t\t\t\tcallback,\n\t\t\t\toptions,\n\t\t\t\tid: id || dynamicEngine.expressions._nanoid(),\n\t\t\t\tdestroy() {\n\t\t\t\t\tdynamicEngine.expressions._destroyRequest(this.id);\n\t\t\t\t}\n\t\t\t};\n\t\t\t// if explicit id is sent, destroy if exists\n\t\t\tif (id) {\n\t\t\t\tdynamicEngine.expressions._destroyRequest(id);\n\t\t\t}\n\t\t\tdynamicEngine.expressions._evaluate(evaluationRequest);\n\t\t\treturn evaluationRequest;\n\t\t},\n\t\t_evaluate(request) {\n\t\t\tconst { expressions } = dynamicEngine;\n\t\t\tconst { id, callback }  = request;\n\t\t\tconst { expression } = request.options;\n\n\t\t\texpressions._prepareContext(\n\t\t\t\trequest.options,\n\t\t\t\t(err, context) => {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tconst handler = {\n\t\t\t\t\t\t\t_usedProperties: {},\n\t\t\t\t\t\t\tget(target, prop) {\n\t\t\t\t\t\t\t\tif (prop === '__handler__') return this;\n\t\t\t\t\t\t\t\tif (prop in target) {\n\t\t\t\t\t\t\t\t\tthis._usedProperties[prop] = true;\n\t\t\t\t\t\t\t\t\treturn target[prop];\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\treturn undefined;\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tset() {\n\t\t\t\t\t\t\t\tthrow 'not_allowed';\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t};\n\t\t\t\t\t\tconst preparedExpression = '`' + expression + '`';\n\t\t\t\t\t\trequest._context = new Proxy(context, handler);\n\t\t\t\t\t\trequest.context = context;\n\t\t\t\t\t\tconst evaluatedExpression =  Function(`\"use strict\"; const context = this;return (${preparedExpression})`).bind(request._context)();\n\t\t\t\t\t\texpressions._evaluationRequests[id] = request;\n\t\t\t\t\t\tconst usedDatasources = request._context.data['__handler__']._usedProperties;\n\t\t\t\t\t\tdynamicEngine.datasources._fetchNeededDatasources({usedDatasources, extendedDatasources: request.options.extendedDatasources}, (err, res) => {\n\t\t\t\t\t\t\tif (err) return console.error('Error occurred while fetching data: ', err);\n\t\t\t\t\t\t\tdynamicEngine.triggerContextChange({contextProperty: 'data', data: res});\n\t\t\t\t\t\t});\n\t\t\t\t\t\trequest.callback(null, evaluatedExpression);\n\t\t\t\t\t} catch (err) {\n\t\t\t\t\t\tcallback(err);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t},\n\t\t/**\n\t\t* Get the base context\n\t\t* @param {string} id - The unique id of the request that should be deleted\n\t\t* @private\n\t\t*/\n\t\t_destroyRequest(id) {\n\t\t\tdelete dynamicEngine.expressions._evaluationRequests[id];\n\t\t},\n\t\t/**\n\t\t* Get the base context\n\t\t* @param {Object} options\n\t\t* @param {Function} callback - Returns the base context (shared between all platforms)\n\t\t* @private\n\t\t*/\n\t\t_getBaseContext(options, callback) {\n\t\t\tlet baseContext = {}; // shared functionality that (app/web/sdk) could use\n\t\t\tcallback(null, baseContext);\n\t\t},\n\t\t/**\n\t\t* @desc This function will be overridden in each platform; so it would get correctly the context of the platform\n\t\t* @param {Object} options\n\t\t* @param {Function} callback - Returns the context of the platform, which requested dynamicEngine.expressions\n\t\t* @public\n\t\t*/\n\t\tgetContext(options, callback) {\n\t\t\tcallback(null, {});\n\t\t},\n\t\t/**\n\t\t* @desc This function will merge the different contexts (baseContext, platform's context and the extendedContext) and return them\n\t\t* @param {Object} options\n\t\t* @param {Function} callback - Returns the final version of the context to be used in the evaluation\n\t\t* @private\n\t\t*/\n\t\t_prepareContext(options, callback) {\n\t\t\tdynamicEngine.expressions._getBaseContext(null, (err, baseContext) => {\n\t\t\t\tdynamicEngine.expressions.getContext({request: options}, (err, context) => {\n\t\t\t\t\tObject.assign(baseContext, context, options.extendedContext);\n\t\t\t\t\tdynamicEngine.datasources._addDatasourcesData({baseContext});\n\t\t\t\t\tcallback(null, baseContext);\n\t\t\t\t});\n\t\t\t});\n\t\t},\n\t\t/**\n\t\t* @desc This function returns weather this file is loaded from a client or a server side\n\t\t* @private\n\t\t*/\n\t\t_isServer() {\n\t\t\treturn !(typeof window !== 'undefined' && window.document);\n\t\t},\n\t\t/**\n\t\t* Get unique id each time\n\t\t* @private\n\t\t*/\n\t\t_nanoid(t=21) {\n\t\t\treturn crypto.getRandomValues(new Uint8Array(t)).reduce(((t,e)=>t+=(e&=63)<36?e.toString(36):e<62?(e-26).toString(36).toUpperCase():e>62?'-':'_'),'');\n\t\t}\n\t},\n\tdatasources: {\n\t\t_datasourcesData: {},\n\t\t_requestedDatasources: {},\n\t\t_addDatasourcesData({baseContext}){\n\t\t\tconst handler = {\n\t\t\t\t_usedProperties: {},\n\t\t\t\tget(target, prop) {\n\t\t\t\t\tif (prop === '__handler__') return this;\n\t\t\t\t\tthis._usedProperties[prop] = true;\n\t\t\t\t\treturn target[prop];\n\t\t\t\t},\n\t\t\t};\n\t\t\tlet data = this._datasourcesData;\n\t\t\tbaseContext.data = new Proxy(data, handler);\n\t\t},\n\t\t_fetchNeededDatasources({usedDatasources, extendedDatasources}, callback) {\n\t\t\tif (usedDatasources && Object.keys(usedDatasources).length > 0) {\n\t\t\t\tdynamicEngine.datasources._getDatasources(null, (err, datasources) => {\n\t\t\t\t\tif (err) return console.error('Error occurred while fetching data: ', err);\n\t\t\t\t\tif (datasources || extendedDatasources) {\n\t\t\t\t\t\tdatasources = datasources || [];\n\t\t\t\t\t\tif (extendedDatasources) {\n\t\t\t\t\t\t\tdatasources = datasources.concat(extendedDatasources);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tfor (let usedDatasourceId in usedDatasources) {\n\t\t\t\t\t\t\tif (!this._requestedDatasources[usedDatasourceId] || ((new Date() - this._requestedDatasources[usedDatasourceId].lastTimeFetched) > 5000)) {\n\t\t\t\t\t\t\t\tconst existedDatasource = datasources.find((datasource) => {\n\t\t\t\t\t\t\t\t\treturn datasource.id === usedDatasourceId;\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\tif (existedDatasource) {\n\t\t\t\t\t\t\t\t\tthis._fetchDatasource({datasource: existedDatasource}, callback);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t},\n\t\t/**\n\t\t* @desc Fetch the datasource's data\n\t\t* @param {object} options.datasource - the needed configuration to fetch the datasource data\n\t\t* @param {Function} callback - Returns the data of the fetched datasource\n\t\t* @private\n\t\t*/\n\t\t_fetchDatasource({datasource}, callback) {\n\t\t\tconst options = {};\n\t\t\tdatasource.lastTimeFetched = new Date();\n\t\t\tthis._requestedDatasources[datasource.id] = datasource;\n\t\t\toptions.method = datasource.configurations.method;\n\t\t\tif (datasource.configurations.headers) {\n\t\t\t\toptions.headers = datasource.configurations.headers;\n\t\t\t}\n\t\t\tif (datasource.configurations.body) {\n\t\t\t\toptions.body = datasource.configurations.body;\n\t\t\t}\n\t\t\tfetch(datasource.configurations.url, options)\n\t\t\t\t.then((response) => response.json())\n\t\t\t\t.then((data) => {\n\t\t\t\t\tdynamicEngine.datasources._datasourcesData[datasource.id] = data;\n\t\t\t\t\tcallback(null, data);\n\t\t\t\t})\n\t\t\t\t.catch((error) => {\n\t\t\t\t\tcallback(error, null);\n\t\t\t\t});\n\t\t},\n\t\t/**\n\t\t* @desc Get all the datasources from the app global settings\n\t\t* @param {Function} callback - Returns the datasources\n\t\t* @private\n\t\t*/\n\t\t_getDatasources(options, callback) {\n\t\t\tdynamicEngine.getGlobalSettings(null, (err, globalSettings) => {\n\t\t\t\tif (err) return callback(err);\n\t\t\t\tif (globalSettings?.appDatasources && globalSettings.appDatasources.length > 0) {\n\t\t\t\t\treturn callback(null, globalSettings.appDatasources);\n\t\t\t\t}\n\t\t\t\tcallback(null, null);\n\t\t\t});\n\t\t}\n\t}\n};\n"]}