{"version":3,"sources":["../sdk/scripts/dynamic/dynamicEngine.js"],"names":["dynamicEngine","expressions","_evaluationRequests","evaluate","id","expression","extendedContext","callback","evaluationRequest","_nanoid","destroy","_destroyRequest","this","_evaluate","_prepareContext","err","context","preparedExpression","_getBaseContextProxy","contextProxy","key","hasOwnProperty","clonedKey","Object","defineProperty","get","_used","evaluatedExpression","Function","bind","options","_getBaseContext","getContext","baseContext","assign","_isServer","window","document","t","crypto","getRandomValues","Uint8Array","reduce","e","toString","toUpperCase","triggerExpressionContextChange","request","contextProperty"],"mappings":"AAAA,MAAMA,cAAgB,CAClBC,YAAa,CACTC,oBAAqB,GASrBC,SAAS,CAACC,GAAAA,EAAIC,WAAAA,EAAYC,gBAAAA,GAAkBC,GAClCC,EAAoB,CACtBD,SAAAA,EACAF,WAAAA,EACAC,gBAAAA,EACAF,GAAIA,GAAMJ,cAAcC,YAAYQ,UACpCC,QAAS,WACLV,cAAcC,YAAYU,gBAAgBC,KAAKR,MAQvD,OAJIA,GACAJ,cAAcC,YAAYU,gBAAgBP,GAE9CJ,cAAcC,YAAYY,UAAUL,GAC7BA,GAEXK,UAAW,SAASL,GAChBR,cAAcC,YAAYa,gBAAgB,CAACR,gBAAiBE,EAAkBF,iBAAkB,CAACS,EAAKC,KAClGR,EAAkBQ,QAAUA,EAC5BhB,cAAcC,YAAYC,oBAAoBM,EAAkBJ,IAAMI,EACtE,IACI,IAAIS,EAAqB,IAAMT,EAAkBH,WAAa,IAC9DL,cAAcC,YAAYiB,qBAAqB,KAAM,CAACH,EAAKI,KAGvD,IAAKC,OAAOJ,EACR,GAAIA,EAAQK,eAAeD,KAAM,CAC7B,IAAIE,EAAYF,IAChBG,OAAOC,eAAeL,EAAcC,IAAK,CACrCK,IAAK,WAED,OADAN,EAAaO,MAAMJ,IAAa,EACzBN,EAAQM,MAM/Bd,EAAkBW,aAAeA,EACjC,IAAIQ,EAAuBC,uDAAuDX,MAAuBY,KAAKV,EAAnFS,GAC3BpB,EAAkBD,SAAS,KAAMoB,KAEvC,MAAOZ,GACLP,EAAkBD,SAASQ,OASvCJ,gBAAiB,SAASP,UACfJ,cAAcC,YAAYC,oBAAoBE,IAOzDc,qBAAqBY,EAASvB,GAI1BA,EAAS,KAHc,CACnBmB,MAAO,MASfK,gBAAgBD,EAASvB,GAErBA,EAAS,KADS,KAQtByB,WAAWF,EAASvB,GAChBA,EAAS,KAAM,KAOnBO,gBAAgB,CAACR,gBAAAA,GAAkBC,GAC/BP,cAAcC,YAAY8B,gBAAgB,KAAM,CAAChB,EAAKkB,KAClDjC,cAAcC,YAAY+B,WAAW,KAAM,CAACjB,EAAKC,KAC7CO,OAAOW,OAAOD,EAAajB,EAASV,GACpCC,EAAS,KAAM0B,QAQ3BE,YACI,QAA2B,oBAAXC,QAA0BA,OAAOC,WAMrD5B,QAAQ6B,EAAE,IACN,OAAOC,OAAOC,gBAAgB,IAAIC,WAAWH,IAAII,OAAO,CAAEJ,EAAEK,IAAIL,IAAIK,GAAG,IAAI,GAAGA,EAAEC,SAAS,IAAID,EAAE,IAAIA,EAAE,IAAIC,SAAS,IAAIC,cAAgB,GAAFF,EAAK,IAAI,IAAK,KAStJG,+BAA+BhB,GAC3B,IAAK,IAAIV,KAAOpB,cAAcC,YAAYC,oBAAqB,CACvD6C,EAAU/C,cAAcC,YAAYC,oBAAoBkB,GACxD2B,EAAQ5B,cAAgB4B,EAAQ5B,aAAaO,MAAMI,EAAQkB,kBAC3DhD,cAAcC,YAAYY,UAAUkC","file":"dynamicEngine.min.js","sourcesContent":["const dynamicEngine = {\n    expressions: {\n        _evaluationRequests: {},\n        /**\n        * Evaluate the received expression\n        * @param {Object} options - The needed elements to evaluate the expression\n        * @param {string} options.expression - The expression to be evaluated\n        * @param {Object} options.extendedContext - Additional context to evaluate the expression against\n        * @param {Function} callback - Returns the evaluated expression or error if existed\n        * @public\n        */\n        evaluate({id, expression, extendedContext}, callback) {\n            const evaluationRequest = {\n                callback,\n                expression,\n                extendedContext,\n                id: id || dynamicEngine.expressions._nanoid(),\n                destroy: function() {\n                    dynamicEngine.expressions._destroyRequest(this.id);\n                }\n            };\n            // if explicit id is sent, destroy if exists\n            if (id) {\n                dynamicEngine.expressions._destroyRequest(id);\n            }\n            dynamicEngine.expressions._evaluate(evaluationRequest);\n            return evaluationRequest;\n        },\n        _evaluate: function(evaluationRequest) {\n            dynamicEngine.expressions._prepareContext({extendedContext: evaluationRequest.extendedContext}, (err, context) => {\n                evaluationRequest.context = context;\n                dynamicEngine.expressions._evaluationRequests[evaluationRequest.id] = evaluationRequest;\n                try {\n                    let preparedExpression = '`' + evaluationRequest.expression + '`';\n                    dynamicEngine.expressions._getBaseContextProxy(null, (err, contextProxy) => {\n                        // consider switching to javascript proxy (https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy#finding_an_array_item_object_by_its_property)\n                        // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy#a_complete_traps_list_example\n                        for (key in context) {\n                            if (context.hasOwnProperty(key)) {\n                                let clonedKey = key; // should be cloned because key inside the getter is referencing the last key every time\n                                Object.defineProperty(contextProxy, key, {\n                                    get: function() { \n                                        contextProxy._used[clonedKey] = true;\n                                        return context[clonedKey]; \n                                    }\n                                })\n                            }\n                        }\n        \n                        evaluationRequest.contextProxy = contextProxy;\n                        let evaluatedExpression =  Function(`\"use strict\"; const context = this;return (${preparedExpression})`).bind(contextProxy)();\n                        evaluationRequest.callback(null, evaluatedExpression);\n                    });\n                } catch (err) {\n                    evaluationRequest.callback(err);\n                }\n            });\n        },\n        /**\n        * Get the base context\n        * @param {string} id - The unique id of the request that should be deleted \n        * @private\n        */\n        _destroyRequest: function(id) {\n            delete dynamicEngine.expressions._evaluationRequests[id];\n        },\n        /**\n        * Get the base context\n        * @param {Function} callback - Returns the base baseContextProxy\n        * @private\n        */\n        _getBaseContextProxy(options, callback) {\n            let baseContextProxy = {\n                _used: {}\n            };\n            callback(null, baseContextProxy);\n        },\n        /**\n        * Get the base context\n        * @param {Function} callback - Returns the base context (shared between all platforms)\n        * @private\n        */\n        _getBaseContext(options, callback) {\n            let baseContext = {}; // shared functionality that (app/web/sdk) could use\n            callback(null, baseContext);\n        },\n        /**\n        * @desc This function will be overridden in each platform; so it would get correctly the context of the platform\n        * @param {Function} callback - Returns the context of the platform, which requested dynamicEngine.expressions\n        * @public\n        */\n        getContext(options, callback) {\n            callback(null, {});\n        },\n        /**\n        * @desc This function will merge the different contexts (baseContext, platform's context and the extendedContext) and return them\n        * @param {Function} callback - Returns the final version of the context to be used in the evaluation\n        * @private\n        */\n        _prepareContext({extendedContext}, callback) { \n            dynamicEngine.expressions._getBaseContext(null, (err, baseContext) => {\n                dynamicEngine.expressions.getContext(null, (err, context) => {\n                    Object.assign(baseContext, context, extendedContext);\n                    callback(null, baseContext);\n                });     \n            });\n        },\n        /**\n        * @desc This function returns weather this file is loaded from a client or a server side\n        * @private\n        */\n        _isServer() {\n            return !(typeof window !== 'undefined' && window.document);\n        },\n        /**\n        * Get unique id each time\n        * @private\n        */\n        _nanoid(t=21) {\n            return crypto.getRandomValues(new Uint8Array(t)).reduce(((t,e)=>t+=(e&=63)<36?e.toString(36):e<62?(e-26).toString(36).toUpperCase():e>62?\"-\":\"_\"),\"\");\n        },\n        /**\n        * Trigger reevaluation when (onLogin, onLogout, appTheme change) happens\n        * @param {Object} options - information about the triggered source (contextProperty, data)\n        * @param {string} options.contextProperty - The event that have been triggered (onLogin, onLogout, appTheme change)\n        * @param {Object} options.data - Data coming from the event triggering\n        * @public\n        */\n        triggerExpressionContextChange(options) {\n            for (let key in dynamicEngine.expressions._evaluationRequests) {\n                let request = dynamicEngine.expressions._evaluationRequests[key];\n                if (request.contextProxy && request.contextProxy._used[options.contextProperty]) {\n                    dynamicEngine.expressions._evaluate(request);\n                }\n            }\n        }\n    }\n}"]}