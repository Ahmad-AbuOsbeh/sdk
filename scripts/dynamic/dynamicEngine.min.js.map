{"version":3,"sources":["../sdk/scripts/dynamic/dynamicEngine.js"],"names":["dynamicEngine","triggerContextChange","options","key","expressions","_evaluationRequests","request","context","_context","_usedProperties","contextProperty","_evaluate","getGlobalSettings","callback","_isServer","window","document","evaluate","id","evaluationRequest","_nanoid","destroy","_destroyRequest","this","expression","_prepareContext","err","handler","get","target","prop","set","includes","handleRepeaters","preparedExpression","Proxy","evaluatedExpression","Function","bind","usedDatasources","data","datasources","_fetchNeededDatasources","extendedDatasources","res","console","error","_getBaseContext","getContext","baseContext","Object","assign","extendedContext","_addDatasourcesData","container","createElement","innerHTML","_checkNestedRepeaters","element","scope","_handleRepeaters","JSON","parse","stringify","repeatAttr","getAttribute","removeAttribute","loopVar","arrayName","split","replace","match","expr","propertyName","array","eval","forEach","item","index","newItem","cloneNode","parentNode","appendChild","remove","nestedRepeaters","querySelector","t","crypto","getRandomValues","Uint8Array","reduce","e","toString","toUpperCase","datasourcesData","requestedDatasources","keys","length","_getDatasources","allDatasources","filteredDatasources","datasource","find","extendedDatasource","push","usedDatasourceId","existingDatasource","Date","lastTimeFetched","fetchDatasource","type","_fetchApi","promises","_evaluateDatasourceConfiguration","configuration","url","method","headers","body","Promise","all","then","fetch","response","json","catch","values","value","resolve","reject","result","globalSettings","appDatasources"],"mappings":"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","file":"dynamicEngine.min.js","sourcesContent":["// eslint-disable-next-line no-redeclare\nconst dynamicEngine = {\n\t/**\n\t* Trigger reevaluation when (onLogin, onLogout, appTheme change) happens\n\t* @param {Object} options - information about the triggered source (contextProperty, data)\n\t* @param {string} options.contextProperty - The event that have been triggered (onLogin, onLogout, appTheme change)\n\t* @param {Object} options.data - Data coming from the event triggering\n\t* @public\n\t*/\n\ttriggerContextChange(options) {\n\t\tfor (let key in dynamicEngine.expressions._evaluationRequests) {\n\t\t\tlet request = dynamicEngine.expressions._evaluationRequests[key];\n\t\t\tif (request.context && request._context['__handler__']._usedProperties[options.contextProperty]) {\n\t\t\t\tdynamicEngine.expressions._evaluate(request);\n\t\t\t}\n\t\t}\n\t},\n\tgetGlobalSettings(options, callback) {\n\t\tcallback(null, {});\n\t},\n\t/**\n\t* @desc This function returns weather this file is loaded from a client or a server side\n\t* @private\n\t*/\n\t_isServer() {\n\t\treturn !(typeof window !== 'undefined' && window.document);\n\t},\n\texpressions: {\n\t\t_evaluationRequests: {},\n\t\t/**\n\t\t* Evaluate the received expression\n\t\t* @param {Object} options - The needed elements to evaluate the expression\n\t\t* @param {string} options.expression - The expression to be evaluated\n\t\t* @param {Object} options.extendedContext - Additional context to evaluate the expression against\n\t\t* @param {Function} callback - Returns the evaluated expression or error if existed\n\t\t* @public\n\t\t*/\n\t\tevaluate(options, callback) {\n\t\t\toptions = options || {};\n\t\t\tconst { id } = options; \n\t\t\tconst evaluationRequest = {\n\t\t\t\tcallback,\n\t\t\t\toptions,\n\t\t\t\tid: id || dynamicEngine.expressions._nanoid(),\n\t\t\t\tdestroy() {\n\t\t\t\t\tdynamicEngine.expressions._destroyRequest(this.id);\n\t\t\t\t}\n\t\t\t};\n\t\t\t// if explicit id is sent, destroy if exists\n\t\t\tif (id) {\n\t\t\t\tdynamicEngine.expressions._destroyRequest(id);\n\t\t\t}\n\t\t\tdynamicEngine.expressions._evaluate(evaluationRequest);\n\t\t\treturn evaluationRequest;\n\t\t},\n\t\t_evaluate(request) {\n\t\t\tconst { expressions } = dynamicEngine;\n\t\t\tconst { id, callback }  = request;\n\t\t\tlet expression = request.options?.expression || '';\n\n\t\t\texpressions._prepareContext(\n\t\t\t\trequest.options,\n\t\t\t\t(err, context) => {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tconst handler = {\n\t\t\t\t\t\t\t_usedProperties: {},\n\t\t\t\t\t\t\tget(target, prop) {\n\t\t\t\t\t\t\t\tif (prop === '__handler__') return this;\n\t\t\t\t\t\t\t\tif (prop in target) {\n\t\t\t\t\t\t\t\t\tthis._usedProperties[prop] = true;\n\t\t\t\t\t\t\t\t\treturn target[prop];\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\treturn undefined;\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tset() {\n\t\t\t\t\t\t\t\tthrow 'not_allowed';\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t};\n\t\t\t\t\t\tif (expression.includes('buildfire-repeat')) {\n\t\t\t\t\t\t\texpression = dynamicEngine.expressions.handleRepeaters({expression, context});\n\t\t\t\t\t\t}\n\t\t\t\t\t\tconst preparedExpression = '`' + expression + '`';\n\t\t\t\t\t\trequest._context = new Proxy(context, handler);\n\t\t\t\t\t\trequest.context = context;\n\t\t\t\t\t\tconst evaluatedExpression =  Function(`\"use strict\"; const context = this;return (${preparedExpression})`).bind(request._context)();\n\t\t\t\t\t\texpressions._evaluationRequests[id] = request;\n\t\t\t\t\t\tconst usedDatasources = request._context.data['__handler__']._usedProperties;\n\t\t\t\t\t\tdynamicEngine.datasources._fetchNeededDatasources({usedDatasources, extendedDatasources: request.options.extendedDatasources}, (err, res) => {\n\t\t\t\t\t\t\tif (err) return console.error('Error occurred while fetching data: ', err);\n\t\t\t\t\t\t\tdynamicEngine.triggerContextChange({contextProperty: 'data', data: res});\n\t\t\t\t\t\t});\n\t\t\t\t\t\tcallback(null, {evaluatedExpression, evaluationRequest: request});\n\t\t\t\t\t} catch (err) {\n\t\t\t\t\t\tcallback(err);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t},\n\t\t/**\n\t\t* Get the base context\n\t\t* @param {string} id - The unique id of the request that should be deleted\n\t\t* @private\n\t\t*/\n\t\t_destroyRequest(id) {\n\t\t\tdelete dynamicEngine.expressions._evaluationRequests[id];\n\t\t},\n\t\t/**\n\t\t* Get the base context\n\t\t* @param {Object} options\n\t\t* @param {Function} callback - Returns the base context (shared between all platforms)\n\t\t* @private\n\t\t*/\n\t\t_getBaseContext(options, callback) {\n\t\t\tlet baseContext = {}; // shared functionality that (app/web/sdk) could use\n\t\t\tcallback(null, baseContext);\n\t\t},\n\t\t/**\n\t\t* @desc This function will be overridden in each platform; so it would get correctly the context of the platform\n\t\t* @param {Object} options\n\t\t* @param {Function} callback - Returns the context of the platform, which requested dynamicEngine.expressions\n\t\t* @public\n\t\t*/\n\t\tgetContext(options, callback) {\n\t\t\tcallback(null, {});\n\t\t},\n\t\t/**\n\t\t* @desc This function will merge the different contexts (baseContext, platform's context and the extendedContext) and return them\n\t\t* @param {Object} options\n\t\t* @param {Function} callback - Returns the final version of the context to be used in the evaluation\n\t\t* @private\n\t\t*/\n\t\t_prepareContext(options, callback) {\n\t\t\tdynamicEngine.expressions._getBaseContext(null, (err, baseContext) => {\n\t\t\t\tdynamicEngine.expressions.getContext({request: options}, (err, context) => {\n\t\t\t\t\tObject.assign(baseContext, context, options.extendedContext);\n\t\t\t\t\tdynamicEngine.datasources._addDatasourcesData({context: baseContext});\n\t\t\t\t\tcallback(null, baseContext);\n\t\t\t\t});\n\t\t\t});\n\t\t},\n\t\t/**\n\t\t* @desc Handle all the repeaters functionality; so the content of the repeaters could be evaluated\n\t\t* @param {Object} options.expression - The expression to be evaluated\n\t\t* @param {Object} options.context - The context that is being used in the evaluation process\n\t\t* @public\n\t\t*/\n\t\thandleRepeaters({expression, context}) {\n\t\t\tlet container = document.createElement('div');\n\t\t\tcontainer.innerHTML = expression;\n\t\t\tdynamicEngine.expressions._checkNestedRepeaters({element: container, context, scope: {}});\n\t\t\treturn container.innerHTML;\n\t\t},\n\t\t/**\n\t\t* @desc Handle all the repeaters functionality; so the content of the repeaters could be evaluated\n\t\t* @param {Object} options.element - The container element to check if it contains any repeater element\n\t\t* @param {Object} options.context - The context that is being used in the evaluation process\n\t\t* @param {Object} options.scope - Contains all the paths for the repeaters' scoped variables\n\t\t* @private\n\t\t*/\n\t\t_handleRepeaters({element, context, scope}) {\n\t\t\t// remove the reference of the scope property\n\t\t\tscope = JSON.parse(JSON.stringify(scope));\n\t\t\n\t\t\tconst repeatAttr = element.getAttribute('buildfire-repeat');\n\t\t\t\n\t\t\telement.removeAttribute('buildfire-repeat');\n\t\t\n\t\t\t// Extract the loop variable and array name from the (buildfire-repeat) attribute\n\t\t\tlet [loopVar, arrayName] = repeatAttr.split(' in ');\n\t\t\t\n\t\t\t// handle arrays that are not starting with (context); so they can be evaluated\n\t\t\t// For example, (order.items) will be converted to something like (context.data.orders[0].items); so it can be evaluated\n\t\t\tarrayName = arrayName.replace(/(^(?! *context\\.).*)/, (match, expr) => {\n\t\t\t\t// Get the first part of the arrayName\n\t\t\t\t// For example, if the arrayName is (order.items), propertyName will be (order)\n\t\t\t\tconst propertyName = arrayName.split('.')[0];\n\t\t\t\t// check if the path to the array (order) is existing\n\t\t\t\tif (scope[propertyName]) return expr.replace(propertyName, scope[propertyName]);\n\t\t\t});\n\t\t\n\t\t\ttry {\n\t\t\t\t// Get the array to loop over\n\t\t\t\tconst array = eval(`${arrayName}`);\n\t\t\t\t// Loop over the array\n\t\t\t\tarray?.forEach((item, index) => {\n\t\t\t\t\tscope[loopVar] = `${arrayName}[${index}]`;\n\t\t\t\n\t\t\t\t\t// Create a new element based on the container\n\t\t\t\t\tconst newItem = element.cloneNode(true);\n\t\t\t\t\t\n\t\t\t\t\t// check for any elements that contains the (buildfire-repeat) attribute and handle them\n\t\t\t\t\tdynamicEngine.expressions._checkNestedRepeaters({element: newItem, context, scope});\n\t\t\t\n\t\t\t\t\t// select all template literals that is not starting with (context) and handle them\n\t\t\t\t\tnewItem.innerHTML = newItem.innerHTML.replace(/\\${((?! *context\\.)[^{}]*)}/g, (match, expr) => {\n\t\t\t\t\t\t// Evaluate the expression in the loop scope\n\t\t\t\t\t\treturn '${' + expr.replace(loopVar, scope[loopVar]) + '}';\n\t\t\t\t\t});\n\t\t\t\t\n\t\t\t\t\t// Append the new element to the container's parent\n\t\t\t\t\telement.parentNode.appendChild(newItem);\n\t\t\t\t});\n\t\t\t\telement.remove();\n\t\t\t} catch (err) {\n\t\t\t\telement.remove();\n\t\t\t\tconsole.error(err);\n\t\t\t}\n\t\t},\n\t\t/**\n\t\t* @desc Check if there is any nested elements that has (buildfire-repeat) attribute in the given element\n\t\t* @param {Object} options.element - The container element to check if it contains any repeater element\n\t\t* @param {Object} options.context - The context that is being used in the evaluation process\n\t\t* @param {Object} options.scope - Contains all the paths for the repeaters' scoped variables\n\t\t* @private\n\t\t*/\n\t\t_checkNestedRepeaters({element, context, scope}) {\n\t\t\tconst nestedRepeaters = element.querySelector('[buildfire-repeat]');\n\t\t\tif (nestedRepeaters) {\n\t\t\t\tdynamicEngine.expressions._handleRepeaters({element: nestedRepeaters, context, scope});\n\t\t\t}\n\t\t\tif (element.querySelector('[buildfire-repeat]')) { // check if there still nested repeaters\n\t\t\t\tdynamicEngine.expressions._checkNestedRepeaters({element, context, scope});\n\t\t\t}\n\t\t},\n\t\t/**\n\t\t* Get unique id each time\n\t\t* @private\n\t\t*/\n\t\t_nanoid(t=21) {\n\t\t\treturn crypto.getRandomValues(new Uint8Array(t)).reduce(((t,e)=>t+=(e&=63)<36?e.toString(36):e<62?(e-26).toString(36).toUpperCase():e>62?'-':'_'),'');\n\t\t}\n\t},\n\tdatasources: {\n\t\tdatasourcesData: {},\n\t\trequestedDatasources: {},\n\t\t/**\n\t\t* @desc Add all of the datasources' data to the context to be used in the evaluation process\n\t\t* @param {Object} options.context - The context that is being used in the evaluation process\n\t\t* @private\n\t\t*/\n\t\t_addDatasourcesData({context}){\n\t\t\tconst handler = {\n\t\t\t\t_usedProperties: {},\n\t\t\t\tget(target, prop) {\n\t\t\t\t\tif (prop === '__handler__') return this;\n\t\t\t\t\tthis._usedProperties[prop] = true;\n\t\t\t\t\treturn target[prop];\n\t\t\t\t},\n\t\t\t};\n\t\t\tlet data = this.datasourcesData;\n\t\t\tcontext.data = new Proxy(data, handler);\n\t\t},\n\t\t/**\n\t\t* @desc Check for just the needed datasources and fetch them\n\t\t* @param {Object} options - Datasources's configuration that is used to fetch the datasource's data\n\t\t* @param {Object} options.usedDatasources - Datasources that is being used in the evaluated expression\n\t\t* @param {string} options.extendedDatasources - The extended datasources, which have been sent with the evaluation request\n\t\t* @param {Function} callback - Returns the data of the fetched datasource\n\t\t* @private\n\t\t*/\n\t\t_fetchNeededDatasources({usedDatasources, extendedDatasources}, callback) {\n\t\t\tif (usedDatasources && Object.keys(usedDatasources).length > 0) {\n\t\t\t\tdynamicEngine.datasources._getDatasources(null, (err, datasources) => {\n\t\t\t\t\tif (err) return console.error('Error occurred while fetching data: ', err);\n\t\t\t\t\tif (datasources || extendedDatasources) {\n\t\t\t\t\t\tdatasources = datasources || [];\n\t\t\t\t\t\tlet allDatasources = JSON.parse(JSON.stringify(datasources));\n\t\t\t\t\t\tif (extendedDatasources) {\n\t\t\t\t\t\t\tlet filteredDatasources = []; // contain datasources from globalSettings without duplicates\n\t\t\t\t\t\t\tdatasources.forEach(datasource => {\n\t\t\t\t\t\t\t\tlet duplicateDatasource = extendedDatasources.find((extendedDatasource) => {\n\t\t\t\t\t\t\t\t\treturn extendedDatasource.id === datasource.id;\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t// don't push a datasource from globalSettings if it has the same id as a datasource in extendedDatasources\n\t\t\t\t\t\t\t\tif (!duplicateDatasource) {\n\t\t\t\t\t\t\t\t\tfilteredDatasources.push(datasource);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\tallDatasources = [...filteredDatasources, ...extendedDatasources];\n\t\t\t\t\t\t}\n\t\t\t\t\t\tfor (let usedDatasourceId in usedDatasources) {\n\t\t\t\t\t\t\tif (!this.requestedDatasources[usedDatasourceId] || ((new Date() - this.requestedDatasources[usedDatasourceId].lastTimeFetched) > 5000)) {\n\t\t\t\t\t\t\t\tconst existingDatasource = allDatasources.find((datasource) => {\n\t\t\t\t\t\t\t\t\treturn datasource.id === usedDatasourceId;\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\tif (existingDatasource) {\n\t\t\t\t\t\t\t\t\tthis.fetchDatasource({datasource: existingDatasource}, callback);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t},\n\t\t/**\n\t\t* @desc Fetch the datasource's data\n\t\t* @param {object} options.datasource - The needed configuration to fetch the datasource data\n\t\t* @param {Function} callback - Returns the data of the fetched datasource\n\t\t* @public\n\t\t*/\n\t\tfetchDatasource({ datasource }, callback) {\n\t\t\tdatasource.lastTimeFetched = new Date();\n\t\t\tthis.requestedDatasources[datasource.id] = datasource;\n\t\t\n\t\t\tswitch (datasource.type) {\n\t\t\tcase 'api': \n\t\t\t\tdynamicEngine.datasources._fetchApi({ datasource }, callback);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t},\n\t\t/**\n\t\t* @desc Fetch the datasource's data\n\t\t* @param {Object} options - Datasources's configuration that is used to fetch the datasource's data\n\t\t* @param {Function} callback - Contains the datasource's data\n\t\t* @private\n\t\t*/\n\t\t_fetchApi({ datasource }, callback) {\n\t\t\tconst promises = dynamicEngine.datasources._evaluateDatasourceConfiguration([\n\t\t\t\tdatasource.configuration?.url,\n\t\t\t\tdatasource.configuration?.method,\n\t\t\t\tdatasource.configuration?.headers,\n\t\t\t\tdatasource.configuration?.body,\n\t\t\t]);\n\t\t\n\t\t\tPromise.all(promises)\n\t\t\t\t.then(([url, method, headers, body]) => {\n\t\t\t\t\tconst options = {};\n\t\t\t\t\tif (headers) options.headers = headers;\n\t\t\t\t\tif (body) options.body = body;\n\t\t\t\t\tfetch(url, options)\n\t\t\t\t\t\t.then((response) => response.json())\n\t\t\t\t\t\t.then((data) => {\n\t\t\t\t\t\t\tdynamicEngine.datasources.datasourcesData[datasource.id] = data;\n\t\t\t\t\t\t\tcallback(null, data);\n\t\t\t\t\t\t})\n\t\t\t\t\t\t.catch((error) => {\n\t\t\t\t\t\t\tcallback(error, null);\n\t\t\t\t\t\t});\t\n\t\t\t\t})\n\t\t\t\t.catch((error) => {\n\t\t\t\t\tcallback(error, null);\n\t\t\t\t});\n\t\t},\n\t\t/**\n\t\t* @desc Evaluate the datasource configuration. For example, the url to fetch the datasource would contain expressions\n\t\t* @param {Array} values - Contains the datasource's configurations that should be evaluated\n\t\t* @private\n\t\t*/\n\t\t_evaluateDatasourceConfiguration(values) {\n\t\t\tconst promises = [];\n\t\t\tfor (const value of values) {\n\t\t\t\tif (!value) {\n\t\t\t\t\tpromises.push(Promise.resolve(''));\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tpromises.push(new Promise((resolve, reject) => {\n\t\t\t\t\tdynamicEngine.expressions.evaluate({ expression: value }, (error, result) => {\n\t\t\t\t\t\tif (error) {\n\t\t\t\t\t\t\treject(error);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tresult.evaluationRequest.destroy();\n\t\t\t\t\t\t\tresolve(result.evaluatedExpression);\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t}));\n\t\t\t}\n\t\t\treturn promises;\n\t\t},\n\t\t/**\n\t\t* @desc Get all the datasources from the app global settings\n\t\t* @param {Function} callback - Returns the datasources\n\t\t* @private\n\t\t*/\n\t\t_getDatasources(options, callback) {\n\t\t\tdynamicEngine.getGlobalSettings(null, (err, globalSettings) => {\n\t\t\t\tif (err) return callback(err);\n\t\t\t\tif (globalSettings?.appDatasources && globalSettings.appDatasources.length > 0) {\n\t\t\t\t\treturn callback(null, globalSettings.appDatasources);\n\t\t\t\t}\n\t\t\t\tcallback(null, null);\n\t\t\t});\n\t\t}\n\t}\n};\n"]}