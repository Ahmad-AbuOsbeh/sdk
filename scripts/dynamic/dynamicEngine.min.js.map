{"version":3,"sources":["../sdk/scripts/dynamic/dynamicEngine.js"],"names":["dynamicEngine","triggerContextChange","options","key","expressions","_evaluationRequests","request","context","_context","_usedProperties","contextProperty","_evaluate","getGlobalSettings","callback","_isServer","window","document","_decode","encodedString","atob","evaluate","id","evaluationRequest","_nanoid","destroy","_destroyRequest","this","expression","_prepareContext","err","handler","get","target","prop","set","evaluateExpression","preparedExpression","Proxy","evaluatedExpression","Function","bind","usedDatasources","data","datasources","_fetchNeededDatasources","extendedDatasources","res","console","error","includes","repeater","_replaceRepeaters","result","_getBaseContext","getContext","baseContext","Object","assign","extendedContext","_addDatasourcesData","_exposeRepeaterStructure","container","createElement","innerHTML","_replaceRepeaterTree","scope","log","repeatElement","querySelector","JSON","parse","stringify","repeatAttr","getAttribute","removeAttribute","scopeVariableName","qualifiedArrayPath","split","map","item","trim","replace","match","expr","propertyName","array","forEach","index","newItem","cloneNode","updatedExpr","parentNode","insertBefore","remove","message","t","crypto","getRandomValues","Uint8Array","reduce","e","toString","toUpperCase","datasourcesData","requestedDatasources","keys","length","_getDatasources","allDatasources","filteredDatasources","datasource","find","extendedDatasource","push","usedDatasourceId","existingDatasource","Date","lastTimeFetched","fetchDatasource","type","_fetchApi","datasourceConfiguration","configuration","promises","_evaluateDatasourceConfiguration","url","method","headers","body","Promise","all","then","fetch","response","json","catch","values","value","resolve","reject","globalSettings","appDatasources"],"mappings":"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","file":"dynamicEngine.min.js","sourcesContent":["// eslint-disable-next-line no-redeclare\nconst dynamicEngine = {\n\t/**\n\t* Trigger reevaluation when (onLogin, onLogout, appTheme change) happens\n\t* @param {Object} options - information about the triggered source (contextProperty, data)\n\t* @param {string} options.contextProperty - The event that have been triggered (onLogin, onLogout, appTheme change)\n\t* @param {Object} options.data - Data coming from the event triggering\n\t* @public\n\t*/\n\ttriggerContextChange(options) {\n\t\tfor (let key in dynamicEngine.expressions._evaluationRequests) {\n\t\t\tlet request = dynamicEngine.expressions._evaluationRequests[key];\n\t\t\tif (request.context && request._context['__handler__']._usedProperties[options.contextProperty]) {\n\t\t\t\tdynamicEngine.expressions._evaluate(request);\n\t\t\t}\n\t\t}\n\t},\n\tgetGlobalSettings(options, callback) {\n\t\tcallback(null, {});\n\t},\n\t/**\n\t* @desc This function returns weather this file is loaded from a client or a server side\n\t* @private\n\t*/\n\t_isServer() {\n\t\treturn !(typeof window !== 'undefined' && window.document);\n\t},\n\t_decode({encodedString}) {\n\t\treturn atob(encodedString); // control side is using (btoa) to encode\n\t},\n\texpressions: {\n\t\t_evaluationRequests: {},\n\t\t/**\n\t\t* Evaluate the received expression\n\t\t* @param {Object} options - The needed elements to evaluate the expression\n\t\t* @param {string} options.expression - The expression to be evaluated\n\t\t* @param {Object} options.extendedContext - Additional context to evaluate the expression against\n\t\t* @param {Function} callback - Returns the evaluated expression or error if existed\n\t\t* @public\n\t\t*/\n\t\tevaluate(options, callback) {\n\t\t\toptions = options || {};\n\t\t\tconst { id } = options; \n\t\t\tconst evaluationRequest = {\n\t\t\t\tcallback,\n\t\t\t\toptions,\n\t\t\t\tid: id || dynamicEngine.expressions._nanoid(),\n\t\t\t\tdestroy() {\n\t\t\t\t\tdynamicEngine.expressions._destroyRequest(this.id);\n\t\t\t\t}\n\t\t\t};\n\t\t\t// if explicit id is sent, destroy if exists\n\t\t\tif (id) {\n\t\t\t\tdynamicEngine.expressions._destroyRequest(id);\n\t\t\t}\n\t\t\tdynamicEngine.expressions._evaluate(evaluationRequest);\n\t\t\treturn evaluationRequest;\n\t\t},\n\t\t_evaluate(request) {\n\t\t\tconst { expressions } = dynamicEngine;\n\t\t\tconst { id, callback }  = request;\n\t\t\tlet expression = request.options.expression || '';\n\n\t\t\texpressions._prepareContext(\n\t\t\t\trequest.options,\n\t\t\t\t(err, context) => {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tconst handler = {\n\t\t\t\t\t\t\t_usedProperties: {},\n\t\t\t\t\t\t\tget(target, prop) {\n\t\t\t\t\t\t\t\tif (prop === '__handler__') return this;\n\t\t\t\t\t\t\t\tif (prop in target) {\n\t\t\t\t\t\t\t\t\tthis._usedProperties[prop] = true;\n\t\t\t\t\t\t\t\t\treturn target[prop];\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\treturn undefined;\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tset() {\n\t\t\t\t\t\t\t\tthrow 'not_allowed';\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t};\n\t\t\t\t\t\tconst evaluateExpression = () => {\n\t\t\t\t\t\t\tconst preparedExpression = '`' + expression + '`';\n\t\t\t\t\t\t\trequest._context = new Proxy(context, handler);\n\t\t\t\t\t\t\trequest.context = context;\n\t\t\t\t\t\t\tconst evaluatedExpression =  Function(`\"use strict\"; const context = this;return (${preparedExpression})`).bind(request._context)();\n\t\t\t\t\t\t\texpressions._evaluationRequests[id] = request;\n\t\t\t\t\t\t\tconst usedDatasources = request._context.data['__handler__']._usedProperties;\n\t\t\t\t\t\t\tdynamicEngine.datasources._fetchNeededDatasources({usedDatasources, extendedDatasources: request.options.extendedDatasources}, (err, res) => {\n\t\t\t\t\t\t\t\tif (err) return console.error('Error occurred while fetching data: ', err);\n\t\t\t\t\t\t\t\tdynamicEngine.triggerContextChange({contextProperty: 'data', data: res});\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\tcallback(null, {evaluatedExpression, evaluationRequest: request});\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\tif (expression.includes('buildfire-repeat')) {\n\t\t\t\t\t\t\tdynamicEngine.expressions.repeater._replaceRepeaters({expression, context}, (err, result) => {\n\t\t\t\t\t\t\t\tif (err) return callback(err);\n\t\t\t\t\t\t\t\texpression = result;\n\t\t\t\t\t\t\t\tevaluateExpression();\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tevaluateExpression();\n\t\t\t\t\t\t}\n\t\t\t\t\t} catch (err) {\n\t\t\t\t\t\tcallback(err);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t},\n\t\t/**\n\t\t* Get the base context\n\t\t* @param {string} id - The unique id of the request that should be deleted\n\t\t* @private\n\t\t*/\n\t\t_destroyRequest(id) {\n\t\t\tdelete dynamicEngine.expressions._evaluationRequests[id];\n\t\t},\n\t\t/**\n\t\t* Get the base context\n\t\t* @param {Object} options\n\t\t* @param {Function} callback - Returns the base context (shared between all platforms)\n\t\t* @private\n\t\t*/\n\t\t_getBaseContext(options, callback) {\n\t\t\tlet baseContext = {}; // shared functionality that (app/web/sdk) could use\n\t\t\tcallback(null, baseContext);\n\t\t},\n\t\t/**\n\t\t* @desc This function will be overridden in each platform; so it would get correctly the context of the platform\n\t\t* @param {Object} options\n\t\t* @param {Function} callback - Returns the context of the platform, which requested dynamicEngine.expressions\n\t\t* @public\n\t\t*/\n\t\tgetContext(options, callback) {\n\t\t\tcallback(null, {});\n\t\t},\n\t\t/**\n\t\t* @desc This function will merge the different contexts (baseContext, platform's context and the extendedContext) and return them\n\t\t* @param {Object} options\n\t\t* @param {Function} callback - Returns the final version of the context to be used in the evaluation\n\t\t* @private\n\t\t*/\n\t\t_prepareContext(options, callback) {\n\t\t\tdynamicEngine.expressions._getBaseContext(null, (err, baseContext) => {\n\t\t\t\tdynamicEngine.expressions.getContext({request: options}, (err, context) => {\n\t\t\t\t\tObject.assign(baseContext, context, options.extendedContext);\n\t\t\t\t\tdynamicEngine.datasources._addDatasourcesData({context: baseContext});\n\t\t\t\t\tcallback(null, baseContext);\n\t\t\t\t});\n\t\t\t});\n\t\t},\n\t\trepeater: {\n\t\t\t_exposeRepeaterStructure: false, // change it to false to show the repeater structure for development purposes \n\t\t\t/**\n\t\t\t* @desc Handle all the repeaters functionality; so the content of the repeaters could be evaluated\n\t\t\t* @param {Object} options.expression - The expression to be evaluated\n\t\t\t* @param {Object} options.context - The context that is being used in the evaluation process\n\t\t\t* @public\n\t\t\t*/\n\t\t\t_replaceRepeaters({expression, context}, callback) {\n\t\t\t\ttry {\n\t\t\t\t\tlet container = document.createElement('div');\n\t\t\t\t\tcontainer.innerHTML = expression;\n\t\t\t\t\tdynamicEngine.expressions.repeater._replaceRepeaterTree({container, context, scope: {}});\n\t\t\t\t\tif (dynamicEngine.expressions.repeater._exposeRepeaterStructure) console.log('Repeater Structure', container.innerHTML);\n\t\t\t\t\tcallback(null, container.innerHTML);\n\t\t\t\t} catch (err) {\n\t\t\t\t\tcallback(err);\n\t\t\t\t}\n\t\t\t},\n\t\t\t/**\n\t\t\t* @desc Handle all the repeaters functionality; so the content of the repeaters could be evaluated\n\t\t\t* @param {Object} options.element - The container element to check if it contains any repeater element\n\t\t\t* @param {Object} options.context - The context that is being used in the evaluation process\n\t\t\t* @param {Object} options.scope - Contains all the paths for the repeaters' scoped variables\n\t\t\t* @private\n\t\t\t*/\n\t\t\t_replaceRepeaterTree({container, context, scope}) {\n\t\t\t\tconst repeatElement = container.querySelector('[buildfire-repeat]');\n\t\t\t\tif (repeatElement) {\n\t\t\t\t\t// remove the reference of the scope property\n\t\t\t\t\tscope = JSON.parse(JSON.stringify(scope));\n\t\t\t\n\t\t\t\t\tconst repeatAttr = repeatElement.getAttribute('buildfire-repeat');\n\t\t\t\t\t\n\t\t\t\t\trepeatElement.removeAttribute('buildfire-repeat');\n\t\t\t\t\n\t\t\t\t\t// Extract the loop variable and array name from the (buildfire-repeat) attribute\n\t\t\t\t\tlet [scopeVariableName, qualifiedArrayPath] = repeatAttr.split(' in ').map(item => item.trim());\n\t\t\t\t\n\t\t\t\t\t// handle arrays that are not starting with (context); so they can be evaluated\n\t\t\t\t\t// For example, (order.items) will be converted to something like (context.data.orders[0].items); so it can be evaluated\n\t\t\t\t\tqualifiedArrayPath = qualifiedArrayPath.replace(/(^(?! *context\\.).*)/, (match, expr) => {\n\t\t\t\t\t\t// Get the first part of the qualifiedArrayPath\n\t\t\t\t\t\t// For example, if the qualifiedArrayPath is (order.items), propertyName will be (order)\n\t\t\t\t\t\tconst propertyName = qualifiedArrayPath.split('.')[0];\n\t\t\t\t\t\t// check if the path to the array (order) is existing\n\t\t\t\t\t\treturn expr.replace(propertyName, scope[propertyName]);\n\t\t\t\t\t});\n\t\t\t\t\n\t\t\t\t\ttry {\n\t\t\t\t\t\t// Get the array to loop over\n\t\t\t\t\t\tconst array = Function(`\"use strict\"; const context = this;return (${qualifiedArrayPath})`).bind(context)();\n\t\t\t\t\t\t// Loop over the array\n\t\t\t\t\t\tif (array) {\n\t\t\t\t\t\t\tarray.forEach((item, index) => {\n\t\t\t\t\t\t\t\tscope[scopeVariableName] = `${qualifiedArrayPath}[${index}]`;\n\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t// Create a new element based on the container\n\t\t\t\t\t\t\t\tconst newItem = repeatElement.cloneNode(true);\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t// check for any elements that contains the (buildfire-repeat) attribute and handle them\n\t\t\t\t\t\t\t\tdynamicEngine.expressions.repeater._replaceRepeaterTree({container: newItem, context, scope});\n\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t// select all template literals that is not starting with (context) and handle them\n\t\t\t\t\t\t\t\tnewItem.innerHTML = newItem.innerHTML.replace(/\\${((?! *context\\.)[^{}]*)}/g, (match, expr) => {\n\t\t\t\t\t\t\t\t\t// Evaluate the expression in the loop scope\n\t\t\t\t\t\t\t\t\tconst updatedExpr = expr.replace(scopeVariableName, scope[scopeVariableName]);\n\t\t\t\t\t\t\t\t\tif (dynamicEngine.expressions.repeater._exposeRepeaterStructure) {\n\t\t\t\t\t\t\t\t\t\treturn '${' + updatedExpr + '}' + '<span style=\"display:none\">' + updatedExpr + '</span>';\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\treturn '${' + updatedExpr + '}';\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t// Append the new element to the container's parent\n\t\t\t\t\t\t\t\trepeatElement.parentNode.insertBefore(newItem, repeatElement);\n\t\t\t\t\t\t\t});\t\n\t\t\t\t\t\t}\n\t\t\t\t\t\trepeatElement.remove();\n\t\t\t\t\t} catch (err) {\n\t\t\t\t\t\trepeatElement.remove();\n\t\t\t\t\t\tif (!err.message || !(err.message.includes('undefined') || err.message.includes('null'))) {\n\t\t\t\t\t\t\tthrow err;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (container.querySelector('[buildfire-repeat]')) { // check if there still nested repeaters\n\t\t\t\t\tdynamicEngine.expressions.repeater._replaceRepeaterTree({container, context, scope});\n\t\t\t\t}\n\t\t\t},\n\t\t},\n\t\t/**\n\t\t* Get unique id each time\n\t\t* @private\n\t\t*/\n\t\t_nanoid(t=21) {\n\t\t\treturn crypto.getRandomValues(new Uint8Array(t)).reduce(((t,e)=>t+=(e&=63)<36?e.toString(36):e<62?(e-26).toString(36).toUpperCase():e>62?'-':'_'),'');\n\t\t}\n\t},\n\tdatasources: {\n\t\tdatasourcesData: {},\n\t\trequestedDatasources: {},\n\t\t/**\n\t\t* @desc Add all of the datasources' data to the context to be used in the evaluation process\n\t\t* @param {Object} options.context - The context that is being used in the evaluation process\n\t\t* @private\n\t\t*/\n\t\t_addDatasourcesData({context}){\n\t\t\tconst handler = {\n\t\t\t\t_usedProperties: {},\n\t\t\t\tget(target, prop) {\n\t\t\t\t\tif (prop === '__handler__') return this;\n\t\t\t\t\tthis._usedProperties[prop] = true;\n\t\t\t\t\treturn target[prop];\n\t\t\t\t},\n\t\t\t};\n\t\t\tlet data = this.datasourcesData;\n\t\t\tcontext.data = new Proxy(data, handler);\n\t\t},\n\t\t/**\n\t\t* @desc Check for just the needed datasources and fetch them\n\t\t* @param {Object} options - Datasources's configuration that is used to fetch the datasource's data\n\t\t* @param {Object} options.usedDatasources - Datasources that is being used in the evaluated expression\n\t\t* @param {string} options.extendedDatasources - The extended datasources, which have been sent with the evaluation request\n\t\t* @param {Function} callback - Returns the data of the fetched datasource\n\t\t* @private\n\t\t*/\n\t\t_fetchNeededDatasources({usedDatasources, extendedDatasources}, callback) {\n\t\t\tif (usedDatasources && Object.keys(usedDatasources).length > 0) {\n\t\t\t\tdynamicEngine.datasources._getDatasources(null, (err, datasources) => {\n\t\t\t\t\tif (err) return console.error('Error occurred while fetching data: ', err);\n\t\t\t\t\tif (datasources || extendedDatasources) {\n\t\t\t\t\t\tdatasources = datasources || [];\n\t\t\t\t\t\tlet allDatasources = JSON.parse(JSON.stringify(datasources));\n\t\t\t\t\t\tif (extendedDatasources) {\n\t\t\t\t\t\t\tlet filteredDatasources = []; // contain datasources from globalSettings without duplicates\n\t\t\t\t\t\t\tdatasources.forEach(datasource => {\n\t\t\t\t\t\t\t\tlet duplicateDatasource = extendedDatasources.find((extendedDatasource) => {\n\t\t\t\t\t\t\t\t\treturn extendedDatasource.id === datasource.id;\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t// don't push a datasource from globalSettings if it has the same id as a datasource in extendedDatasources\n\t\t\t\t\t\t\t\tif (!duplicateDatasource) {\n\t\t\t\t\t\t\t\t\tfilteredDatasources.push(datasource);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\tallDatasources = [...filteredDatasources, ...extendedDatasources];\n\t\t\t\t\t\t}\n\t\t\t\t\t\tfor (let usedDatasourceId in usedDatasources) {\n\t\t\t\t\t\t\tif (!this.requestedDatasources[usedDatasourceId] || ((new Date() - this.requestedDatasources[usedDatasourceId].lastTimeFetched) > 5000)) {\n\t\t\t\t\t\t\t\tconst existingDatasource = allDatasources.find((datasource) => {\n\t\t\t\t\t\t\t\t\treturn datasource.id === usedDatasourceId;\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\tif (existingDatasource) {\n\t\t\t\t\t\t\t\t\tthis.fetchDatasource({datasource: existingDatasource}, callback);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t},\n\t\t/**\n\t\t* @desc Fetch the datasource's data\n\t\t* @param {object} options.datasource - The needed configuration to fetch the datasource data\n\t\t* @param {Function} callback - Returns the data of the fetched datasource\n\t\t* @public\n\t\t*/\n\t\tfetchDatasource({ datasource }, callback) {\n\t\t\tdatasource.lastTimeFetched = new Date();\n\t\t\tthis.requestedDatasources[datasource.id] = datasource;\n\t\t\n\t\t\tswitch (datasource.type) {\n\t\t\tcase 'api': \n\t\t\t\tdynamicEngine.datasources._fetchApi({ datasource }, callback);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t},\n\t\t/**\n\t\t* @desc Fetch the datasource's data\n\t\t* @param {Object} options - Datasources's configuration that is used to fetch the datasource's data\n\t\t* @param {Function} callback - Contains the datasource's data\n\t\t* @private\n\t\t*/\n\t\t_fetchApi({ datasource }, callback) {\n\t\t\tlet datasourceConfiguration = JSON.parse(dynamicEngine._decode({encodedString: datasource.configuration}));\n\t\t\tconst promises = dynamicEngine.datasources._evaluateDatasourceConfiguration([\n\t\t\t\tdatasourceConfiguration?.url,\n\t\t\t\tdatasourceConfiguration?.method,\n\t\t\t\tdatasourceConfiguration?.headers,\n\t\t\t\tdatasourceConfiguration?.body,\n\t\t\t]);\n\t\t\n\t\t\tPromise.all(promises)\n\t\t\t\t.then(([url, method, headers, body]) => {\n\t\t\t\t\tconst options = {};\n\t\t\t\t\tif (method) options.method = method;\n\t\t\t\t\tif (headers) options.headers = JSON.parse(headers);\n\t\t\t\t\tif (body) options.body = JSON.parse(body);\n\t\t\t\t\tfetch(url, options)\n\t\t\t\t\t\t.then((response) => response.json())\n\t\t\t\t\t\t.then((data) => {\n\t\t\t\t\t\t\tdynamicEngine.datasources.datasourcesData[datasource.id] = data;\n\t\t\t\t\t\t\tcallback(null, data);\n\t\t\t\t\t\t})\n\t\t\t\t\t\t.catch((error) => {\n\t\t\t\t\t\t\tcallback(error, null);\n\t\t\t\t\t\t});\t\n\t\t\t\t})\n\t\t\t\t.catch((error) => {\n\t\t\t\t\tcallback(error, null);\n\t\t\t\t});\n\t\t},\n\t\t/**\n\t\t* @desc Evaluate the datasource configuration. For example, the url to fetch the datasource would contain expressions\n\t\t* @param {Array} values - Contains the datasource's configurations that should be evaluated\n\t\t* @private\n\t\t*/\n\t\t_evaluateDatasourceConfiguration(values) {\n\t\t\tconst promises = [];\n\t\t\tfor (const value of values) {\n\t\t\t\tif (!value) {\n\t\t\t\t\tpromises.push(Promise.resolve(''));\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tpromises.push(new Promise((resolve, reject) => {\n\t\t\t\t\tdynamicEngine.expressions.evaluate({ expression: value }, (error, result) => {\n\t\t\t\t\t\tif (error) {\n\t\t\t\t\t\t\treject(error);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tresult.evaluationRequest.destroy();\n\t\t\t\t\t\t\tresolve(result.evaluatedExpression);\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t}));\n\t\t\t}\n\t\t\treturn promises;\n\t\t},\n\t\t/**\n\t\t* @desc Get all the datasources from the app global settings\n\t\t* @param {Function} callback - Returns the datasources\n\t\t* @private\n\t\t*/\n\t\t_getDatasources(options, callback) {\n\t\t\tdynamicEngine.getGlobalSettings(null, (err, globalSettings) => {\n\t\t\t\tif (err) return callback(err);\n\t\t\t\tif (globalSettings?.appDatasources && globalSettings.appDatasources.length > 0) {\n\t\t\t\t\treturn callback(null, globalSettings.appDatasources);\n\t\t\t\t}\n\t\t\t\tcallback(null, null);\n\t\t\t});\n\t\t}\n\t}\n};\n"]}