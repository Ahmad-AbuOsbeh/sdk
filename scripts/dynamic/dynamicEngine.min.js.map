{"version":3,"sources":["../sdk/scripts/dynamic/dynamicEngine.js"],"names":["dynamicEngine","triggerContextChange","options","key","expressions","_evaluationRequests","request","context","_context","_usedProperties","contextProperty","_evaluate","getGlobalSettings","callback","_isServer","window","document","evaluate","id","evaluationRequest","_nanoid","destroy","_destroyRequest","this","expression","_prepareContext","err","handler","get","target","prop","set","preparedExpression","Proxy","evaluatedExpression","Function","bind","usedDatasources","data","datasources","_fetchNeededDatasources","extendedDatasources","res","console","error","_getBaseContext","getContext","baseContext","Object","assign","extendedContext","_addDatasourcesData","t","crypto","getRandomValues","Uint8Array","reduce","e","toString","toUpperCase","datasourcesData","requestedDatasources","keys","length","_getDatasources","allDatasources","JSON","parse","stringify","filteredDatasources","forEach","datasource","find","extendedDatasource","push","usedDatasourceId","existingDatasource","Date","lastTimeFetched","fetchDatasource","type","_fetchApi","promises","_evaluateDatasourceConfiguration","configuration","url","method","headers","body","Promise","all","then","fetch","response","json","catch","values","value","resolve","reject","result","globalSettings","appDatasources"],"mappings":"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","file":"dynamicEngine.min.js","sourcesContent":["// eslint-disable-next-line no-redeclare\nconst dynamicEngine = {\n\t/**\n\t* Trigger reevaluation when (onLogin, onLogout, appTheme change) happens\n\t* @param {Object} options - information about the triggered source (contextProperty, data)\n\t* @param {string} options.contextProperty - The event that have been triggered (onLogin, onLogout, appTheme change)\n\t* @param {Object} options.data - Data coming from the event triggering\n\t* @public\n\t*/\n\ttriggerContextChange(options) {\n\t\tfor (let key in dynamicEngine.expressions._evaluationRequests) {\n\t\t\tlet request = dynamicEngine.expressions._evaluationRequests[key];\n\t\t\tif (request.context && request._context['__handler__']._usedProperties[options.contextProperty]) {\n\t\t\t\tdynamicEngine.expressions._evaluate(request);\n\t\t\t}\n\t\t}\n\t},\n\tgetGlobalSettings(options, callback) {\n\t\tcallback(null, {});\n\t},\n\t/**\n\t* @desc This function returns weather this file is loaded from a client or a server side\n\t* @private\n\t*/\n\t_isServer() {\n\t\treturn !(typeof window !== 'undefined' && window.document);\n\t},\n\texpressions: {\n\t\t_evaluationRequests: {},\n\t\t/**\n\t\t* Evaluate the received expression\n\t\t* @param {Object} options - The needed elements to evaluate the expression\n\t\t* @param {string} options.expression - The expression to be evaluated\n\t\t* @param {Object} options.extendedContext - Additional context to evaluate the expression against\n\t\t* @param {Function} callback - Returns the evaluated expression or error if existed\n\t\t* @public\n\t\t*/\n\t\tevaluate(options, callback) {\n\t\t\toptions = options || {};\n\t\t\tconst { id } = options; \n\t\t\tconst evaluationRequest = {\n\t\t\t\tcallback,\n\t\t\t\toptions,\n\t\t\t\tid: id || dynamicEngine.expressions._nanoid(),\n\t\t\t\tdestroy() {\n\t\t\t\t\tdynamicEngine.expressions._destroyRequest(this.id);\n\t\t\t\t}\n\t\t\t};\n\t\t\t// if explicit id is sent, destroy if exists\n\t\t\tif (id) {\n\t\t\t\tdynamicEngine.expressions._destroyRequest(id);\n\t\t\t}\n\t\t\tdynamicEngine.expressions._evaluate(evaluationRequest);\n\t\t\treturn evaluationRequest;\n\t\t},\n\t\t_evaluate(request) {\n\t\t\tconst { expressions } = dynamicEngine;\n\t\t\tconst { id, callback }  = request;\n\t\t\tconst expression = request.options?.expression || '';\n\n\t\t\texpressions._prepareContext(\n\t\t\t\trequest.options,\n\t\t\t\t(err, context) => {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tconst handler = {\n\t\t\t\t\t\t\t_usedProperties: {},\n\t\t\t\t\t\t\tget(target, prop) {\n\t\t\t\t\t\t\t\tif (prop === '__handler__') return this;\n\t\t\t\t\t\t\t\tif (prop in target) {\n\t\t\t\t\t\t\t\t\tthis._usedProperties[prop] = true;\n\t\t\t\t\t\t\t\t\treturn target[prop];\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\treturn undefined;\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tset() {\n\t\t\t\t\t\t\t\tthrow 'not_allowed';\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t};\n\t\t\t\t\t\tconst preparedExpression = '`' + expression + '`';\n\t\t\t\t\t\trequest._context = new Proxy(context, handler);\n\t\t\t\t\t\trequest.context = context;\n\t\t\t\t\t\tconst evaluatedExpression =  Function(`\"use strict\"; const context = this;return (${preparedExpression})`).bind(request._context)();\n\t\t\t\t\t\texpressions._evaluationRequests[id] = request;\n\t\t\t\t\t\tconst usedDatasources = request._context.data['__handler__']._usedProperties;\n\t\t\t\t\t\tdynamicEngine.datasources._fetchNeededDatasources({usedDatasources, extendedDatasources: request.options.extendedDatasources}, (err, res) => {\n\t\t\t\t\t\t\tif (err) return console.error('Error occurred while fetching data: ', err);\n\t\t\t\t\t\t\tdynamicEngine.triggerContextChange({contextProperty: 'data', data: res});\n\t\t\t\t\t\t});\n\t\t\t\t\t\tcallback(null, {evaluatedExpression, evaluationRequest: request});\n\t\t\t\t\t} catch (err) {\n\t\t\t\t\t\tcallback(err);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t},\n\t\t/**\n\t\t* Get the base context\n\t\t* @param {string} id - The unique id of the request that should be deleted\n\t\t* @private\n\t\t*/\n\t\t_destroyRequest(id) {\n\t\t\tdelete dynamicEngine.expressions._evaluationRequests[id];\n\t\t},\n\t\t/**\n\t\t* Get the base context\n\t\t* @param {Object} options\n\t\t* @param {Function} callback - Returns the base context (shared between all platforms)\n\t\t* @private\n\t\t*/\n\t\t_getBaseContext(options, callback) {\n\t\t\tlet baseContext = {}; // shared functionality that (app/web/sdk) could use\n\t\t\tcallback(null, baseContext);\n\t\t},\n\t\t/**\n\t\t* @desc This function will be overridden in each platform; so it would get correctly the context of the platform\n\t\t* @param {Object} options\n\t\t* @param {Function} callback - Returns the context of the platform, which requested dynamicEngine.expressions\n\t\t* @public\n\t\t*/\n\t\tgetContext(options, callback) {\n\t\t\tcallback(null, {});\n\t\t},\n\t\t/**\n\t\t* @desc This function will merge the different contexts (baseContext, platform's context and the extendedContext) and return them\n\t\t* @param {Object} options\n\t\t* @param {Function} callback - Returns the final version of the context to be used in the evaluation\n\t\t* @private\n\t\t*/\n\t\t_prepareContext(options, callback) {\n\t\t\tdynamicEngine.expressions._getBaseContext(null, (err, baseContext) => {\n\t\t\t\tdynamicEngine.expressions.getContext({request: options}, (err, context) => {\n\t\t\t\t\tObject.assign(baseContext, context, options.extendedContext);\n\t\t\t\t\tdynamicEngine.datasources._addDatasourcesData({baseContext});\n\t\t\t\t\tcallback(null, baseContext);\n\t\t\t\t});\n\t\t\t});\n\t\t},\n\t\t/**\n\t\t* Get unique id each time\n\t\t* @private\n\t\t*/\n\t\t_nanoid(t=21) {\n\t\t\treturn crypto.getRandomValues(new Uint8Array(t)).reduce(((t,e)=>t+=(e&=63)<36?e.toString(36):e<62?(e-26).toString(36).toUpperCase():e>62?'-':'_'),'');\n\t\t}\n\t},\n\tdatasources: {\n\t\tdatasourcesData: {},\n\t\trequestedDatasources: {},\n\t\t_addDatasourcesData({baseContext}){\n\t\t\tconst handler = {\n\t\t\t\t_usedProperties: {},\n\t\t\t\tget(target, prop) {\n\t\t\t\t\tif (prop === '__handler__') return this;\n\t\t\t\t\tthis._usedProperties[prop] = true;\n\t\t\t\t\treturn target[prop];\n\t\t\t\t},\n\t\t\t};\n\t\t\tlet data = this.datasourcesData;\n\t\t\tbaseContext.data = new Proxy(data, handler);\n\t\t},\n\t\t_fetchNeededDatasources({usedDatasources, extendedDatasources}, callback) {\n\t\t\tif (usedDatasources && Object.keys(usedDatasources).length > 0) {\n\t\t\t\tdynamicEngine.datasources._getDatasources(null, (err, datasources) => {\n\t\t\t\t\tif (err) return console.error('Error occurred while fetching data: ', err);\n\t\t\t\t\tif (datasources || extendedDatasources) {\n\t\t\t\t\t\tdatasources = datasources || [];\n\t\t\t\t\t\tlet allDatasources = JSON.parse(JSON.stringify(datasources));\n\t\t\t\t\t\tif (extendedDatasources) {\n\t\t\t\t\t\t\tlet filteredDatasources = []; // contain datasources from globalSettings without duplicates\n\t\t\t\t\t\t\tdatasources.forEach(datasource => {\n\t\t\t\t\t\t\t\tlet duplicateDatasource = extendedDatasources.find((extendedDatasource) => {\n\t\t\t\t\t\t\t\t\treturn extendedDatasource.id === datasource.id;\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t// don't push a datasource from globalSettings if it has the same id as a datasource in extendedDatasources\n\t\t\t\t\t\t\t\tif (!duplicateDatasource) {\n\t\t\t\t\t\t\t\t\tfilteredDatasources.push(datasource);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\tallDatasources = [...filteredDatasources, ...extendedDatasources];\n\t\t\t\t\t\t}\n\t\t\t\t\t\tfor (let usedDatasourceId in usedDatasources) {\n\t\t\t\t\t\t\tif (!this.requestedDatasources[usedDatasourceId] || ((new Date() - this.requestedDatasources[usedDatasourceId].lastTimeFetched) > 5000)) {\n\t\t\t\t\t\t\t\tconst existingDatasource = allDatasources.find((datasource) => {\n\t\t\t\t\t\t\t\t\treturn datasource.id === usedDatasourceId;\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\tif (existingDatasource) {\n\t\t\t\t\t\t\t\t\tthis.fetchDatasource({datasource: existingDatasource}, callback);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t},\n\t\t/**\n\t\t* @desc Fetch the datasource's data\n\t\t* @param {object} options.datasource - the needed configuration to fetch the datasource data\n\t\t* @param {Function} callback - Returns the data of the fetched datasource\n\t\t* @private\n\t\t*/\n\t\tfetchDatasource({ datasource }, callback) {\n\t\t\tdatasource.lastTimeFetched = new Date();\n\t\t\tthis.requestedDatasources[datasource.id] = datasource;\n\t\t\n\t\t\tswitch (datasource.type) {\n\t\t\tcase 'api': \n\t\t\t\tdynamicEngine.datasources._fetchApi({ datasource }, callback);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t},\n\t\t_fetchApi({ datasource }, callback) {\n\t\t\tconst promises = dynamicEngine.datasources._evaluateDatasourceConfiguration([\n\t\t\t\tdatasource.configuration?.url,\n\t\t\t\tdatasource.configuration?.method,\n\t\t\t\tdatasource.configuration?.headers,\n\t\t\t\tdatasource.configuration?.body,\n\t\t\t]);\n\t\t\n\t\t\tPromise.all(promises)\n\t\t\t\t.then(([url, method, headers, body]) => {\n\t\t\t\t\tconst options = {};\n\t\t\t\t\tif (headers) options.headers = headers;\n\t\t\t\t\tif (body) options.body = body;\n\t\t\t\t\tfetch(url, options)\n\t\t\t\t\t\t.then((response) => response.json())\n\t\t\t\t\t\t.then((data) => {\n\t\t\t\t\t\t\tdynamicEngine.datasources.datasourcesData[datasource.id] = data;\n\t\t\t\t\t\t\tcallback(null, data);\n\t\t\t\t\t\t})\n\t\t\t\t\t\t.catch((error) => {\n\t\t\t\t\t\t\tcallback(error, null);\n\t\t\t\t\t\t});\t\n\t\t\t\t})\n\t\t\t\t.catch((error) => {\n\t\t\t\t\tcallback(error, null);\n\t\t\t\t});\n\t\t},\n\t\t_evaluateDatasourceConfiguration(values) {\n\t\t\tconst promises = [];\n\t\t\tfor (const value of values) {\n\t\t\t\tif (!value) {\n\t\t\t\t\tpromises.push(Promise.resolve(''));\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tpromises.push(new Promise((resolve, reject) => {\n\t\t\t\t\tdynamicEngine.expressions.evaluate({ expression: value }, (error, result) => {\n\t\t\t\t\t\tif (error) {\n\t\t\t\t\t\t\treject(error);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tresult.evaluationRequest.destroy();\n\t\t\t\t\t\t\tresolve(result.evaluatedExpression);\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t}));\n\t\t\t}\n\t\t\treturn promises;\n\t\t},\n\t\t/**\n\t\t* @desc Get all the datasources from the app global settings\n\t\t* @param {Function} callback - Returns the datasources\n\t\t* @private\n\t\t*/\n\t\t_getDatasources(options, callback) {\n\t\t\tdynamicEngine.getGlobalSettings(null, (err, globalSettings) => {\n\t\t\t\tif (err) return callback(err);\n\t\t\t\tif (globalSettings?.appDatasources && globalSettings.appDatasources.length > 0) {\n\t\t\t\t\treturn callback(null, globalSettings.appDatasources);\n\t\t\t\t}\n\t\t\t\tcallback(null, null);\n\t\t\t});\n\t\t}\n\t}\n};\n"]}